# -*- coding: utf-8 -*-
"""COMP1010-Student-Lab13

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XdBLTJ-XHYV5pDTzLBzfhrs9PNKW5fse

# **COMP1010 - Lab 13 - Python Libraries: NumPy, pandas, and Matplotlib**

### **Introduction to Python Libraries for Data Science**

In this lab, we will introduce you to three essential Python libraries for data science:
- **NumPy**: Used for numerical computations and working with arrays.
- **pandas**: A powerful data manipulation and analysis library.
- **Matplotlib**: A library for creating visualizations.

---

### **1. NumPy: Working with Arrays**

Let's start by importing **NumPy** and creating arrays.
"""

# Importing NumPy
import numpy as np

# Create a 1D array (vector)
arr_1d = np.array([1, 2, 3, 4, 5])
print("1D Array:", arr_1d)

# Create a 2D array (matrix)
arr_2d = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print("2D Array (Matrix):\n", arr_2d)

"""**Q1**: What is the difference between a 1D array and a 2D array in NumPy?

**Answer**: In NumPy, the distinction between 1D arrays and 2D arrays is primarily based on their structure and how they store data.

---

### **2. Array Operations in NumPy**

NumPy allows you to perform vectorized operations, which are more efficient than traditional loops.
"""

# Element-wise operations
arr_add = arr_1d + 10  # Adding 10 to each element
arr_mul = arr_1d * 2   # Multiplying each element by 2

# TODO: Compute the dot product of arr_1d with itself
# Hint: Use np.dot() to calculate the dot product.
arr_dot = np.dot(arr_1d, arr_1d)  # Fill in this line

print("Array after addition:", arr_add)
print("Array after multiplication:", arr_mul)
print("Dot product of arr_1d with itself:", arr_dot)

"""**Q2**: What does `np.dot()` do? How is it different from simple element-wise multiplication?

**Answer**:
- The np.dot() function in NumPy is used to compute the dot product of two arrays. It is a fundamental operation in linear algebra that combines two vectors or matrices in a specific way.

- The np.dot() function in NumPy and simple element-wise multiplication serve different purposes and yield different results.

---

### **3. NumPy Indexing and Slicing**

In NumPy, you can index and slice arrays in a variety of ways.
"""

# Indexing
print("Element at index 2:", arr_1d[2])

# Slicing
print("Sliced Array from index 1 to 3:", arr_1d[1:4])

# Slicing a 2D array
print("Sliced 2D Array (first 2 rows and first 2 columns):\n", arr_2d[:2, :2])

arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
# Simple indexing (using integer indexing)
third_column_simple = arr[:, 2]
print(third_column_simple)

# Advanced indexing (using a list of column indices)
column_index_list = [2]
third_column_advanced_list = arr[:, column_index_list]
print(third_column_advanced_list)

"""**Q3**: How does slicing work in NumPy? What does `arr_1d[1:4]` return?

**Answer**:
- Slicing in NumPy is a powerful feature that allows you to extract specific portions of an array without having to create a copy of the data. It works similarly to Python's built-in list slicing but is optimized for NumPy arrays, enabling efficient access to large datasets.

- `arr_1d[1:4]` returns the elements from index 1 to index 3, inclusive.

---

### **4. pandas: Working with DataFrames**

Now, letâ€™s move on to **pandas** for handling structured data in the form of DataFrames.
"""

# Importing pandas
import pandas as pd

# Creating a simple DataFrame
data = {
    'Name': ['Alice', 'Bob', 'Charlie', 'David'],
    'Age': [24, 27, 22, 32],
    'City': ['New York', 'Los Angeles', 'Chicago', 'Miami']
}

df = pd.DataFrame(data)
print(df)

"""**Q4**: What are the main components of a **pandas DataFrame**? How are rows and columns represented?

**Answer**:
A pandas DataFrame consists of:
- Data: The values organized in a table.
- Rows: Indexed records that represent individual observations.
- Columns: Labeled variables that categorize the data.

In a DataFrame, rows are typically represented by their index labels.

The columns are represented by their headers (e.g., 'Name', 'Age', 'City'). Each header corresponds to a specific type of data for all rows within that column.

---

### **5. DataFrame Operations**

You can perform many useful operations on pandas DataFrames, such as selecting columns, filtering rows, and applying transformations.
"""

# Select a single column
age_column = df['Age']
print("Age Column:\n", age_column)

# TODO: Filter rows where Age is greater than 25
age_above_25 = df[df['Age'] > 25]  # Fill in this line

print("People older than 25:\n", age_above_25)

# Adding a new column
# TODO: Add a 'Salary' column to the DataFrame with values [50000, 60000, 55000, 70000]
df['Salary'] = [50000, 60000, 55000, 70000]  # Fill in this line

print("DataFrame with new 'Salary' column:\n", df)

"""**Q5**: How do you filter rows in a pandas DataFrame? What is the output of `df[df['Age'] > 25]`?

**Answer**: Filtering rows in a pandas DataFrame is a common operation that allows you to select specific subsets of data based on certain conditions. This is typically done using boolean indexing, where you create a boolean mask that specifies which rows to include based on the condition applied to one or more columns.

The output of df[df['Age'] > 25] will be a new DataFrame containing:
- Bob, who is 27 years old and lives in Los Angeles.
- David, who is 32 years old and lives in Miami.

---

### **6. Handling Missing Data in pandas**

Real-world data often has missing values. pandas provides tools to handle these missing values.
"""

# Introducing missing data (NaN)
df.loc[2, 'Salary'] = np.nan

# Check for missing values
print("Missing values in DataFrame:\n", df.isnull())

# TODO: Fill missing values in the 'Salary' column with the column mean (use df.fillna())
df_filled = df['Salary'].fillna(df['Salary'].mean())  # Fill in this line

print("DataFrame with missing values filled:\n", df_filled)

"""**Q6**: How can we handle missing values in a pandas DataFrame? What does `df.fillna()` do?

**Answer**:

1.
Identifying Missing Data: Use isnull() or isna().

Filling Missing Values: Use fillna() to replace NaNs with specified values or methods.

Dropping Rows/Columns: Use dropna() to remove entries with missing data.

2.
The df.fillna() function is specifically designed to handle missing data by replacing NaN values with a specified value or method.

---

### **7. Matplotlib: Data Visualization**

Finally, let's explore **Matplotlib** to visualize data. We will create a simple plot of the ages of people in our DataFrame.
"""

# Importing Matplotlib
import matplotlib.pyplot as plt

# TODO: Create a bar plot showing the Age of each person
# Hint: Use plt.bar() with df['Name'] and df['Age'] as inputs
plt.bar(df['Name'], df['Age'])  # Fill in this line
plt.xlabel('Name')
plt.ylabel('Age')
plt.title('Age of People')
plt.show()

"""**Q7**: What kind of plot is generated by the code above? What does `plt.xlabel()` and `plt.ylabel()` do?

**Answer**:
Bar Plot: The generated plot is a bar plot (or bar chart), which uses rectangular bars to represent the values of different categories. In this case, each bar corresponds to an individual's age, with the height of the bar representing their age value.

- plt.xlabel('Name'): This function sets the label for the x-axis of the plot. In this context, it indicates that the x-axis will display the names of the individuals whose ages are being plotted.
- plt.ylabel('Age'): This function sets the label for the y-axis of the plot. Here, it signifies that the y-axis will represent the ages of the individuals.

---

### **8. Customizing Plots in Matplotlib**

We can customize our plots by changing colors, adding gridlines, and modifying the style.
"""

# Customizing the plot
plt.plot(df['Name'], df['Age'], marker='o', linestyle='-', color='green')
plt.title('Age of People')
plt.xlabel('Name')
plt.ylabel('Age')
plt.grid(True)
plt.show()

"""**Q8**: What do the arguments `marker='o'` and `linestyle='-'` do in the plot?

**Answer**:
marker='o'

- Definition: The marker parameter specifies the shape of the points that are plotted on the graph.
- Usage: In this case, marker='o' indicates that each data point will be represented by a circular marker (a small dot).
- Purpose: This helps to visually distinguish individual data points on the plot, making it easier to see where each value lies along the x-axis (in this case, the names of individuals).

linestyle='-'

- Definition: The linestyle parameter determines the style of the line connecting the data points.
- Usage: By setting linestyle='-', a solid line will connect the points in the plot.
- Purpose: This creates a continuous line that visually represents trends or relationships between the data points, enhancing the overall clarity of the data visualization.

---

### **9. Combining NumPy, pandas, and Matplotlib**

Let's put everything together! We will create a simple DataFrame of sales data and plot it using Matplotlib.
"""

# Creating a simple sales DataFrame
sales_data = {
    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],
    'Sales': [2500, 3000, 3500, 4000, 4500]
}

df_sales = pd.DataFrame(sales_data)

# Plotting the sales data
plt.plot(df_sales['Month'], df_sales['Sales'], marker='o', color='red', linestyle='--')
plt.title('Monthly Sales')
plt.xlabel('Month')
plt.ylabel('Sales ($)')
plt.grid(True)
plt.show()

"""**Q9**: What type of plot is generated here? How can you customize the line color or style?

**Answer**:
- Line Plot: The generated plot is a line plot, which connects individual data points (in this case, sales figures for each month) with lines. The points are marked with circular markers (marker='o'), and the line connecting them is styled with dashed lines (linestyle='--'). This type of plot is useful for showing trends over time.

- You can customize the line color and style in Matplotlib by adjusting the parameters within the plt.plot() function

---

### **10. Additional Resources**

- **NumPy Documentation**: [https://numpy.org/doc/stable/](https://numpy.org/doc/stable/)
- **pandas Documentation**: [https://pandas.pydata.org/pandas-docs/stable/](https://pandas.pydata.org/pandas-docs/stable/)
- **Matplotlib Documentation**: [https://matplotlib.org/stable/contents.html](https://matplotlib.org/stable/contents.html)
- **AI and Data Scientist Roadmap**: [https://roadmap.sh/ai-data-scientist](https://roadmap.sh/ai-data-scientist)
"""